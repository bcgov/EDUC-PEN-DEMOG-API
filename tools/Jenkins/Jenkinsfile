pipeline{
  agent {
    kubernetes {
      label 'mavenPod-PenDemographicsApi'
      cloud 'openshift'
      defaultContainer 'jnlp'
      serviceAccount 'jenkins'
      yaml """
        kind: Pod
        metadata:
          name: jenkins-slave
        spec:
          containers:
          - name: jnlp
            image: registry.access.redhat.com/openshift3/jenkins-agent-maven-35-rhel7
            privileged: false
            alwaysPullImage: false
            workingDir: /tmp
            ttyEnabled: false
            resourceRequestCpu: 3
            resourceRequestMemory: 2Gi
            resourceLimitCpu: 3
            resourceLimitMemory: 2Gi
            env:
            - name: SONARQUBE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: 'pen-demographics-api-secrets'
                  key: sonarqube-host
            - name: SONARQUBE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: 'pen-demographics-api-secrets'
                  key: sonarqube-token
            volumeMounts:
            - mountPath: '/home/jenkins/.m2'
              name: pvc
          volumes:
          - name: pvc
            persistentVolumeClaim:
              claimName: 'maven-slave-pvc'      
      """
    }
  }

    environment{
      TOOLS = 'c2mvws-tools'
      DEV = 'c2mvws-dev'
      TEST = 'c2mvws-test'
      PROD = 'c2mvws-prod'

      REPO_NAME = 'educ-pen-demog-api'
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'dev'

      APP_NAME = 'pen-demographics-api'
      APP_DOMAIN = 'pathfinder.gov.bc.ca'

      SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

      TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
      DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
      PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
  }
  stages{
    stage('Trigger Github Actions Workflow') {
      steps {
        withCredentials([string(credentialsId: 'c2mvws-tools-github-actions-token', variable: 'TOKEN')]) {
          triggerWorkflow(TOKEN)
          waitForWorkflowRunComplete(TOKEN)
        }
      }
    }
    stage('Unit Tests') {
      steps {
        script {
          def pom = readMavenPom file: 'api/pom.xml'
          VERSION = pom.version

          //Env variable is to fix issue where special characters in password were not being escaped properly
          def command = $//bin/bash -c "mvn -f ./api/pom.xml test"/$
          sh """
            set +x
            $command
          """
        }
      }
    }
    stage('Build App') {
      steps {
        sh '/bin/bash -c "mvn -f ./api/pom.xml -Dmaven.test.skip=true package"'
      }
    }
    stage('Create Image Builder') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("bc", "${REPO_NAME}-${JOB_NAME}").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.newBuild("--name=${REPO_NAME}-${JOB_NAME}", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "${REPO_NAME}-${JOB_NAME}").startBuild("--from-file=./api/target/pendemog-api-${VERSION}.jar", "--wait")
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs'
          script {
              openshift.withCluster() {
                openshift.withProject(TOOLS) {
                  def bcApi = openshift.selector('bc', "${REPO_NAME}-${JOB_NAME}")

                  if(bcApi.exists()) {
                      echo "Removing BuildConfig ${REPO_NAME}-${JOB_NAME}"
                      bcApi.delete()
                  }
                }
              }
            }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
	stage('Promote to DEV') {
      steps{
        deployStage('Dev', DEV, DEV_HOST_ROUTE, 'dev')
      }
      post{
        success{
          echo 'Deployment to Dev was successful'
        }
        failure{
          echo 'Deployment to Dev failed'
        }
      }
    }
    stage('Report to SonarQube') {
        steps {
            script{
                dir('api'){
                    sh '/bin/bash -c "mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_HOSTNAME} -Dsonar.login=${SONARQUBE_TOKEN}"'
                }
            }
        }
    }
  }
}

def triggerWorkflow(String token) {
  // def deployRequest = """
  //   {
  //     "ref": "feature/actions",
  //     "environment": "dev"
  //   }
  // """
  // def response = httpRequest customHeaders: [[name: 'Authorization', value: "token ${token}"], [name: 'Accept', value: "application/vnd.github.ant-man-preview+json"]], contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: deployRequest, url: "https://api.github.com/repos/${OWNER}/${REPO_NAME}/deployments"
  // echo "Status: ${response.status}"
  // echo "Content: ${response.content}"

  // def scriptContent = """
  //   curl -vs -H "Authorization: token ${token}" -H "Accept: application/vnd.github.ant-man-preview+json"  -H "Content-Type: application/json" --data '{"ref": "feature/actions", "environment": "dev"}' https://api.github.com/repos/${OWNER}/${REPO_NAME}/deployments
  // """

  def scriptContent = """
    curl -s -H "Authorization: token ${token}" -H "Accept: application/vnd.github.ant-man-preview+json"  -H "Content-Type: application/json" --data '{"event_type": "test"}' https://api.github.com/repos/${OWNER}/${REPO_NAME}/dispatches
  """

  def response = sh (
    script: scriptContent,
    returnStdout: true
  ).trim()

  echo "Response: ${response}"
  echo "triggered test workflow in Github Actions!"
}

def getLatestWorkflowRun(String token) {
  def response = httpRequest customHeaders: [[name: 'Authorization', value: "token ${token}"], [name: 'Accept', value: "application/vnd.github.ant-man-preview+json"]], url: "https://api.github.com/repos/${OWNER}/${REPO_NAME}/actions/runs?branch=master&event=repository_dispatch"
  echo "getLatestWorkflowRun Status: ${response.status}"
  //echo "Content: ${response.content}"
  def jsonObj = readJSON text: response.content
  echo "Total count: ${jsonObj.total_count}"
  def latestRun = jsonObj.total_count > 0 ? jsonObj.workflow_runs.max { it.created_at } : null
  latestRun ? latestRun.id : null
}

def getWorkflowRunById(String token, BigInteger runId) {
  def response = httpRequest customHeaders: [[name: 'Authorization', value: "token ${token}"], [name: 'Accept', value: "application/vnd.github.ant-man-preview+json"]], url: "https://api.github.com/repos/${OWNER}/${REPO_NAME}/actions/runs/${runId}"
  echo "getWorkflowRunById Status: ${response.status}"
  //echo "Content: ${response.content}"
  def jsonObj = readJSON text: response.content
  [response.status, response.conclusion]
}

def waitForWorkflowRunComplete(String token) {
  def latestRunId = getLatestWorkflowRun(token)
  if(!latestRunId) {
    error('No workflow run in Github Acionts. Aborting the build!')
  } else {
    def count = 60  //timeout (60 * 10) seconds = 10 minutes
    def status, conclusion
    while(count-- > 0 && status != 'completed') {
      (status, conclusion) = getWorkflowRunById(token, latestRunId)
      if(status != 'completed') {
        echo "Waiting for workflow run complete: ${count}"
        sleep(10)
      }
    } 

    if(status == 'completed' && conclusion != 'success') {
      error("Workflow run was ${conclusion}. Aborting the build!")
    } else if(count <= 0) {
      error('Workflow run query timed out. Aborting the build!')
    }
  }
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv, String tag) {

  if (!stageEnv.equalsIgnoreCase('Dev')) {
    input("Deploy to ${projectEnv}?")
  }

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${tag}")
      def dcTemplate = openshift.process('-f',
        'tools/openshift/api.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${tag}"
      )

      echo "Applying Deployment ${REPO_NAME}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}
